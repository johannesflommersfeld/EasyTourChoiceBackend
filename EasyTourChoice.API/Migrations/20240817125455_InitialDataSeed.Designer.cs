// <auto-generated />
using System;
using EasyTourChoice.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyTourChoice.API.Migrations
{
    [DbContext(typeof(TourDataContext))]
    [Migration("20240817125455_InitialDataSeed")]
    partial class InitialDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("EasyTourChoice.API.Entities.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            AreaId = 1,
                            Name = "Safiental"
                        },
                        new
                        {
                            AreaId = 2,
                            Name = "St. Antoenien"
                        });
                });

            modelBuilder.Entity("EasyTourChoice.API.Entities.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Altitude = 1300.0,
                            Latitude = 46.733224,
                            Longitude = 9.3354219999999994
                        },
                        new
                        {
                            LocationId = 2,
                            Altitude = 1410.0,
                            Latitude = 46.968062000000003,
                            Longitude = 9.8151139999999995
                        });
                });

            modelBuilder.Entity("EasyTourChoice.API.Entities.TourData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityType")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("ApproachDuration")
                        .HasColumnType("REAL");

                    b.Property<int>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Duration")
                        .HasColumnType("REAL");

                    b.Property<int?>("MetersOfElevation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Risk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("StartingLocationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLocationId");

                    b.HasIndex("AreaId");

                    b.HasIndex("StartingLocationId");

                    b.ToTable("Tours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityLocationId = 1,
                            ActivityType = 11,
                            AreaId = 1,
                            Duration = 5f,
                            MetersOfElevation = 1200,
                            Name = "FantasySkitourSafiental",
                            Risk = 3,
                            ShortDescription = "Non existing ski tour for testing.",
                            StartingLocationId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityLocationId = 2,
                            ActivityType = 11,
                            AreaId = 2,
                            Duration = 5f,
                            MetersOfElevation = 1200,
                            Name = "FantasySkitourStAntoenien",
                            Risk = 4,
                            ShortDescription = "Another non existing ski tour for testing.",
                            StartingLocationId = 2
                        });
                });

            modelBuilder.Entity("EasyTourChoice.API.Entities.TourData", b =>
                {
                    b.HasOne("EasyTourChoice.API.Entities.Location", "ActivityLocation")
                        .WithMany()
                        .HasForeignKey("ActivityLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTourChoice.API.Entities.Area", "Area")
                        .WithMany("Tours")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EasyTourChoice.API.Entities.Location", "StartingLocation")
                        .WithMany()
                        .HasForeignKey("StartingLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLocation");

                    b.Navigation("Area");

                    b.Navigation("StartingLocation");
                });

            modelBuilder.Entity("EasyTourChoice.API.Entities.Area", b =>
                {
                    b.Navigation("Tours");
                });
#pragma warning restore 612, 618
        }
    }
}
